// prompts/bots/promptComponents.ts\nimport { Type } from \'@google/genai\';\nimport {\n    Agent,\n    AppMode,\n    SessionLogEntry,\n    ItineraryItem,\n    Milestone,\n    Tool\n} from \'../../types\';\n\n// 1. MASTER CONTEXT\nexport const getMasterContext = (sessionGoal: string, maestroMemory?: string): string => {\n  const parts = [\n    \"### MASTER CONTEXT (Your high-level goal) ###\",\n    `Your primary objective for this entire session is: ${sessionGoal}`\n  ];\n  if (maestroMemory) {\n    parts.push(`Global Lessons Learned (Maestro\'s Memory): ${maestroMemory}`);\n  }\n  return parts.join(\'\\n\');\n};\n\n// 2. AGENT ASSIGNMENT\nexport const getAgentAssignment = (agent: Agent): string => {\n  return `\n### YOUR ASSIGNMENT ###\nYou are the ${agent.role}.\nYour specialization is: ${agent.expertise}\n(You are represented by ${agent.avatar})\n  `.trim();\n};\n\n// 3. AGENT\'S HISTORICAL CONTEXT (Lessons Learned)\nexport const getAgentMemory = (agent: Agent, agentMemory?: string): string | null => {\n  if (agent.hasPersonalMemory && agentMemory) {\n    return `\n### YOUR LESSONS LEARNED (Recall this) ###\nBased on your past experiences, you\'ve learned: ${agentMemory}\n    `.trim();\n  }\n  return null;\n};\n\n// 4. FACTUAL GROUNDING (Uploaded Docs)\nexport const getUploadedDocsContext = (docContext?: string): string | null => {\n    if (docContext) {\n        return `\n### FACTUAL GROUNDING (Data from uploaded documents) ###\nYou MUST use the following information to inform your response:\n${docContext}\n        `.trim();\n    }\n    return null;\n}\n\n// 5. CURRENT OBJECTIVE (Mode-Specific)\nexport const getCurrentObjective = (\n    mode: AppMode,\n    itineraryItem?: ItineraryItem,\n    milestone?: Milestone,\n    sandboxScenario?: string,\n    agentRole?: string, // The *new* role for sandbox\n): string => {\n  switch (mode) {\n    case \'Boardroom\':\n      return `\n### CURRENT OBJECTIVE (Your immediate task) ###\nThe current discussion topic is: \"${itineraryItem?.text || \'the main goal\'}\"\nYour response MUST be relevant to this topic.\n      `.trim();\n    case \'Project\':\n      return `\n### CURRENT OBJECTIVE (Your immediate task) ###\nYou are assigned to Milestone: \"${milestone?.name}\"\nMilestone Objective: ${milestone?.objective}\nYour task is to generate your portion of the following deliverables: ${milestone?.deliverables.join(\', \')}\n      `.trim();\n    case \'SocialSandbox\':\n      return `\n### CURRENT OBJECTIVE (Your immediate task) ###\nYou are in a roleplaying scenario. You MUST stay in character.\nScenario: ${sandboxScenario}\nYour current persona is: ${agentRole}\n      `.trim();\n    case \'Comparison\':\n      return `\n### CURRENT OBJECTIVE (Your immediate task) ###\nYou are in a head-to-head comparison.\nYour task is to provide the best possible response to the user\'s prompt.\n      `.trim();\n    default:\n      return \'\';\n  }\n};\n\n// 6. RECENT CONVERSATION (Last Turns)\nexport const getRecentConversation = (lastTurns: SessionLogEntry[], agents: Agent[]): string | null => {\n  if (lastTurns.length === 0) return null;\n\n  const transcript = lastTurns.slice(-3).map(turn => {\n    const agent = agents.find(a => a.role === turn.role || a.id === turn.role); // Role can be temp in sandbox\n    const roleName = agent ? agent.role : turn.role;\n    const avatar = agent ? agent.avatar : turn.avatar;\n    return `${roleName} (${avatar || \'...\'}): ${turn.content}`;\n  }).join(\'\\n\');\n\n  return `\n### RECENT CONVERSATION (Context for your response) ###\n${transcript}\n  `.trim();\n};\n\n// 7. AVAILABLE TOOLS (For Function Calling)\nexport const getAvailableTools = (tools?: Tool[]): string | null => {\n  if (!tools || tools.length === 0) return null;\n\n  const toolDeclarations = tools.map(tool => {\n    return `\n- \\\`${tool.name}(${tool.parameters.properties ? Object.keys(tool.parameters.properties).map(prop => `${prop}: ${tool.parameters.properties[prop].type}`).join(\', \') : \'\'})\\\`: ${tool.description}`;\n    }).join(\'\');\n\n  return `\n### AVAILABLE TOOLS ###\nYou have access to the following tools. If you need to use one, respond with a function call.${toolDeclarations}\n  `.trim();\n}\n\n// 8. INSTRUCTIONS & WEIGHTED GUIDANCE\nexport type WeightProfile = { milestone: number; criticalThinking: number; innovation: number };\n\nexport const getInstructions = (\n    weights: WeightProfile,\n    userName: string,\n    agents: Agent[],\n    tools?: Tool[]\n): string => {\n\n  const agentNames = agents\n    .filter(a => a.role !== \'Maestro\')\n    .map(a => a.role)\n    .join(\', \');\n\n  const toolInstruction = tools && tools.length > 0\n    ? `**5. Tool Use:**\\n   - If you need external information to answer, use the provided tools by making a function call in your response.`\n    : \'\';\n\n  return `\n### INSTRUCTIONS FOR YOUR RESPONSE (READ CAREFULLY) ###\n\n**1. Conversational Style (CRITICAL):**\n   - You MUST be conversational. Do not act like a chatbot.\n   - **Acknowledge the previous turn before giving your own.**\n   - **Specifically address their main points if you disagree, have a question, or strongly agree.**\n   - Refer to the user as \"${userName}\" and your colleagues (e.g., ${agentNames}) by their roles.\n   - Example: \"That\'s a solid point, Market Analyst, but I disagree on the risk... I think, ${userName}, we should consider...\"\n\n**2. Response Format:**\n   - Provide your response directly. Do not say \"As the [Role]...\". Just give your expert output.\n   - Adhere strictly to your assigned role and specialization.\n\n**3. Reasoning Weights (How to Think):**\n   - Emphasize the following in your reasoning:\n   - **Current Objective: ${weights.milestone * 100}%**\n   - **Critical Thinking: ${weights.criticalThinking * 100}%**\n   - **Innovation: ${weights.innovation * 100}%**\n\n**4. Language:**\n   - Use natural, flowing, expert language. You are a world-class professional.\n\n${toolInstruction}\n  `.trim();\n};